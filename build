#!/usr/bin/env python3

import os
import subprocess
import sys

# Bootstrapping
# =============

# Make sure the KNinja repo is available.
#
subprocess.check_call(['git', 'submodule', 'update', '--init', '--recursive'])
extdir = 'ext'
sys.path.append(os.path.join(os.path.dirname(__file__), extdir))

from kninja import *

# Build
# =====

proj = KProject(extdir = extdir)


# Fuzzer
# ------

fuzzer = proj.definition( alias       = 'fuzzer'
                        , main        = 'fuzzer.md'
                        , backend     = 'llvm'
                        , flags       = '--gen-bison-parser --syntax-module KORE'
                        )

def fuzz(language, input, depth, limit):
    fuzz_rule = \
        proj.rule( 'fuzzer'
                 , description = 'fuzz $language: $in'
                 , command = 'krun --directory .build/defn/fuzzer/ -cMaxDepth=$depth -cRuleLimit=$limit $in && touch $out'
                 , ext = 'fuzz'
                 )
    implicit_deps = [language.target, fuzzer.target]
    fuzz_rule = fuzz_rule.implicit(implicit_deps)
    ret = proj.source(input).then(fuzz_rule.variable('depth', str(depth)).variable('limit', str(limit)))
    proj.alias(input + '.' + language._alias, [ret])
    return ret

# Languages
# ---------

# IMP

imp_haskell = proj.definition(alias = 'imp-haskell', main = 'imp/imp.md', backend = 'haskell')
imp_llvm    = proj.definition(alias = 'imp-llvm',    main = 'imp/imp.md', backend = 'llvm',     flags = '--coverage' )
fuzz(imp_haskell, 'imp/initial.kore', depth=7, limit=2).default()

# Michelson

michelson_haskell = proj.definition( alias = 'michelson-haskell'
                                   , main = 'michelson/semantics/michelson.md'
                                   , backend = 'haskell'
                                   , flags = "--md-selector 'k | concrete' --syntax-module UNIT-TEST-SYNTAX --main-module MICHELSON"
                                   )
fuzz(michelson_haskell, 'michelson/initial.kore', depth=7, limit=2).default()

proj.main()
